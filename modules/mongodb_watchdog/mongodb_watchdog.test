<?php

/**
 * @file
 * Test class for MongoDB_watchdog.
 */

use Drupal\simpletest\WebTestBase;

/**
 * Test the behaviour of watchdog() mongodb_watchdog, not dblog.
 *
 * Older broken code inherited from D6 dblog tests
 */
class MongoDBLogTestCase extends WebTestBase {
  /**
   * The current MongoDB collection.
   *
   * @var MongoCollection
   */
  protected $collection;

  /**
   * Drupal 6 does not have REQUEST_TIME, use a custom value to minimize D6/D7 differences.
   */
  protected $request_time;

  /**
   * Verify events.
   */
  private function verifyEvents() {
    // Invoke events.
    $this->doUser();
    $this->doNode('article');
    $this->doNode('blog');
    $this->doNode('page');
    $this->doNode('poll');

    // When a user account is canceled, any content they created remains but the
    // uid = 0. Their blog entry shows as "'s blog" on the home page. Records
    // in the watchdog table related to that user have the uid set to zero.
  }

  /**
   * Generate and verify user events.
   */
  private function doUser() {
    // Set user variables.
    $name = $this->randomName();
    $pass = user_password();
    // Add user using form to generate add user event (which is not triggered by drupalCreateUser).
    $edit = [];
    $edit['name'] = $name;
    $edit['mail'] = $name . '@example.com';
    $edit['pass[pass1]'] = $pass;
    $edit['pass[pass2]'] = $pass;
    $edit['status'] = 1;
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertResponse(200);
    // Retrieve user object.
    $user = user_load_by_name($name);
    $this->assertTrue($user != NULL, t('User @name was loaded', ['@name' => $name]));
    // Needed by drupalLogin.
    $user->pass_raw = $pass;
    // Login user.
    $this->drupalLogin($user);
    // Logout user.
    $this->drupalLogout();
    // Fetch row ids in watchdog that relate to the user.
    $collection = mongodb_collection(variable_get('mongodb_watchdog', 'watchdog'));
    $query = ['uid' => $user->uid];
    $result = $collection->find($query, ['_id' => 1]);
    foreach ($result as $row) {
      $ids[] = $row['_id'];
    }
    $count_before = (isset($ids)) ? count($ids) : 0;
    $this->assertTrue($count_before > 0, t('DBLog contains @count records for @name', ['@count' => $count_before, '@name' => $user->name]));

    // Login the admin user.
    $this->drupalLogin($this->big_user);

    // On D6, delete user. On D7, cancel it.
    // We need to POST here to invoke batch_process() in the internal browser.
    $this->drupalPost('user/' . $user->uid . '/cancel', ['user_cancel_method' => 'user_cancel_reassign'], t('Cancel account'));

    // Count rows that have uids for the user.
    $count = $collection->find($query)->count();
    $this->assertTrue($count == 0, t('DBLog contains @count records for @name', ['@count' => $count, '@name' => $user->name]));

    // Count rows in watchdog that previously related to the deleted user.
    if (!empty($ids)) {
      $query['_id']['$in'] = $ids;
    }
    $count_after = $collection->find($query)->count();
    $this->assertTrue($count_after == $count_before, t('DBLog contains @count records for @name that now have uid = 0', ['@count' => $count_before, '@name' => $user->name]));
    unset($ids);
    // Fetch row ids in watchdog that relate to the user.
    $result = $collection->find($query, ['_id' => 1]);
    foreach ($result as $row) {
      $ids[] = $row->wid;
    }
    $this->assertTrue(!isset($ids), t('DBLog contains no records for @name', ['@name' => $user->name]));

    // View the dblog report.
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(200);

    // Verify events were recorded.
    // Add user.
    // Default display includes name and email address; if too long then email is replaced by three periods.
    // $this->assertRaw(t('New user: %name (%mail)', array('%name' => $edit['name'], '%mail' => $edit['mail'])), t('DBLog event was recorded: [add user]'));.
    $this->assertRaw(t('New user: %name', ['%name' => $name]), t('DBLog event was recorded: [add user]'));
    // Login user.
    $this->assertRaw(t('Session opened for %name', ['%name' => $name]), t('DBLog event was recorded: [login user]'));
    // Logout user.
    $this->assertRaw(t('Session closed for %name', ['%name' => $name]), t('DBLog event was recorded: [logout user]'));
    // Delete user.
    $this->assertRaw(t('Deleted user: %name', ['%name' => $name]), t('DBLog event was recorded: [delete user]'));
  }

  /**
   * Generate and verify node events.
   *
   * @param string $type
   *   Content type.
   */
  private function doNode($type) {
    // Create user.
    $perm = ['create ' . $type . ' content', 'edit own ' . $type . ' content', 'delete own ' . $type . ' content'];
    $user = $this->drupalCreateUser($perm);
    // Login user.
    $this->drupalLogin($user);

    // Create node using form to generate add content event (which is not triggered by drupalCreateNode).
    $edit = $this->getContent($type);

    $langcode = LANGUAGE_NONE;
    $title = $edit["title[$langcode][0][value]"];

    $this->drupalPost('node/add/' . $type, $edit, t('Save'));
    $this->assertResponse(200);
    // Retrieve node object.
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertTrue($node != NULL, t('Node @title was loaded', ['@title' => $title]));
    // Edit node.
    $edit = $this->getContentUpdate($type);
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);
    // Delete node.
    $this->drupalPost('node/' . $node->nid . '/delete', [], t('Delete'));
    $this->assertResponse(200);
    // View node (to generate page not found event).
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(404);
    // View the dblog report (to generate access denied event).
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(403);

    // Login the admin user.
    $this->drupalLogin($this->big_user);
    // View the dblog report.
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(200);

    // Verify events were recorded.
    // Content added.
    $this->assertRaw(t('@type: added %title', ['@type' => $type, '%title' => $title]), t('DBLog event was recorded: [content added]'));
    // Content updated.
    $this->assertRaw(t('@type: updated %title', ['@type' => $type, '%title' => $title]), t('DBLog event was recorded: [content updated]'));
    // Content deleted.
    $this->assertRaw(t('@type: deleted %title', ['@type' => $type, '%title' => $title]), t('DBLog event was recorded: [content deleted]'));

    // View dblog access-denied report node.
    $this->drupalGet('admin/reports/access-denied');
    $this->assertResponse(200);
    // Access denied.
    $this->assertText(t('admin/reports/dblog'), t('DBLog event was recorded: [access denied]'));

    // View dblog page-not-found report node.
    $this->drupalGet('admin/reports/page-not-found');
    $this->assertResponse(200);
    // Page not found.
    $this->assertText(t('node/@nid', ['@nid' => $node->nid]), t('DBLog event was recorded: [page not found]'));
  }

  /**
   * Create content based on content type.
   *
   * @param string $type
   *   Content type.
   *
   * @return array Content.
   */
  private function getContent($type) {
    $langcode = LANGUAGE_NONE;
    switch ($type) {
      case 'poll':
        $content = [
          "title[$langcode][0][value]" => $this->randomName(8),
          'choice[new:0][chtext]' => $this->randomName(32),
          'choice[new:1][chtext]' => $this->randomName(32),
        ];
        break;

      default:
        $content = [
          "title[$langcode][0][value]" => $this->randomName(8),
          "body[$langcode][0][value]" => $this->randomName(32),
        ];
        break;
    }
    return $content;
  }

  /**
   * Create content update based on content type.
   *
   * @param string $type
   *   Content type.
   *
   * @return array Content.
   */
  private function getContentUpdate($type) {
    switch ($type) {
      case 'poll':
        $content = [
          'choice[chid:1][chtext]' => $this->randomName(32),
          'choice[chid:2][chtext]' => $this->randomName(32),
        ];
        break;

      default:
        $langcode = LANGUAGE_NONE;
        $content = [
          "body[$langcode][0][value]" => $this->randomName(32),
        ];
        break;
    }
    return $content;
  }

  /**
   * Get the watchdog severity constant corresponding to the CSS class.
   *
   * @param $class
   *   CSS class attribute.
   *
   * @return
   *   The watchdog severity constant or NULL if not found.
   */
  protected function getSeverityConstant($class) {
    // Reversed array from dblog_overview().
    $map = [
      'dblog-debug' => WATCHDOG_DEBUG,
      'dblog-info' => WATCHDOG_INFO,
      'dblog-notice' => WATCHDOG_NOTICE,
      'dblog-warning' => WATCHDOG_WARNING,
      'dblog-error' => WATCHDOG_ERROR,
      'dblog-critical' => WATCHDOG_CRITICAL,
      'dblog-alert' => WATCHDOG_ALERT,
      'dblog-emerg' => WATCHDOG_EMERGENCY,
    ];

    // Find the class that contains the severity.
    $classes = explode(' ', $class);
    foreach ($classes as $class) {
      if (isset($map[$class])) {
        return $map[$class];
      }
    }
    return NULL;
  }

  /**
   * Extract the text contained by the element.
   *
   * @param $element
   *   Element to extract text from.
   *
   * @return
   *   Extracted text.
   */
  protected function asText(SimpleXMLElement $element) {
    if (!is_object($element)) {
      return $this->fail('The element is not an element.');
    }
    return trim(html_entity_decode(strip_tags($element->asXML())));
  }

}
