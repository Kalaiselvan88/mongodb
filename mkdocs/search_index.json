{
    "docs": [
        {
            "location": "/", 
            "text": "MongoDB suite for Drupal 8\n\n\nThe MongoDB\n suite for Drupal\n 8 is a set of modules enabling the\nstorage of various types of data on a Drupal site, in addition to, or as a\nreplacement for the standard SQL storage used by Drupal.\n\n\nIt comprises several Drupal modules, each implementing a specific functionality.\nWith the exception of the base \"driver\" \nmongodb\n module, upon which all others\ndepend because it provides the standardized connection service to Drupal, all\nthe modules are independent of each other except where indicated.\n\n\nThe \nmongodb\n module is not just the basis for this package, but also is\ndesigned to ease the development of bespoke code for end-user projects,\nproviding Drupal-integrated Symfony services for Client and Database with a\nfamiliar alias-based selection, like the SQL database drivers do.\n\n\nModules\n\n\nWorking\n\n\n\n\n\n\n\n\nModule\n\n\nIn a word\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nmongodb\n\n\ndriver\n\n\nMongoDB Client and Database services, \ntests\n base\n\n\n\n\n\n\nmongodb_watchdog\n\n\nlogger\n\n\nPSR-3 compliant logger with a built-in UI\n\n\n\n\n\n\n\n\nNot yet ported\n\n\nThese modules exist for earlier Drupal versions, but have not been ported to\nDrupal 8 yet. Some of them might never be ported because they are no longer\nrelevant in Drupal 8\n\n\n\n\n\n\n\n\nModule\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nmongodb_block\n\n\nStore Drupal blocks in MongoDB\n\n\n\n\n\n\nmongodb_block_ui\n\n\nProvide a UI to manager blocks stored in MongoDB. Depends on \nmongodb_block\n.\n\n\n\n\n\n\nmongodb_cache\n\n\nStore cache information in MongoDB\n\n\n\n\n\n\nmongodb_field_storage\n\n\nStore entities and their fields in MongoDB\n\n\n\n\n\n\nmongodb_migrate\n\n\nMigrate SQL entities/fields to MongoDB. Depends on \nmongodb_field_storage\n.\n\n\n\n\n\n\nmongodb_queue\n\n\nImplement a MongoDB backend for Queue API\n\n\n\n\n\n\nmongodb_session\n\n\nStore session information in MongoDB\n\n\n\n\n\n\n\n\nPlanned\n\n\nThese modules have no direct equivalent in earlier versions, but their\ndevelopment is being considered.\n\n\n\n\n\n\n\n\nModule\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nmongodb_debug\n\n\nProvide low-level debug information. A D7 version exists on \nmongodb_logger\n but depends on the legacy \nmongo\n PHP extension. Futures versions will need the 1.4 version of the \nmongodb\n extension which implements the MongoDB APM specification.\n\n\n\n\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nLegal information\n\n\n\n\nThis suite of modules is licensed under the General Public License, version 2 or later (GPL-2.0+).\n\n\nMongoDB is a registered trademark of MongoDB Inc.\n\n\nDrupal is a registered trademark of Dries Buytaert.", 
            "title": "Home"
        }, 
        {
            "location": "/#mongodb-suite-for-drupal-8", 
            "text": "The MongoDB  suite for Drupal  8 is a set of modules enabling the\nstorage of various types of data on a Drupal site, in addition to, or as a\nreplacement for the standard SQL storage used by Drupal.  It comprises several Drupal modules, each implementing a specific functionality.\nWith the exception of the base \"driver\"  mongodb  module, upon which all others\ndepend because it provides the standardized connection service to Drupal, all\nthe modules are independent of each other except where indicated.  The  mongodb  module is not just the basis for this package, but also is\ndesigned to ease the development of bespoke code for end-user projects,\nproviding Drupal-integrated Symfony services for Client and Database with a\nfamiliar alias-based selection, like the SQL database drivers do.", 
            "title": "MongoDB suite for Drupal 8"
        }, 
        {
            "location": "/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/#working", 
            "text": "Module  In a word  Information      mongodb  driver  MongoDB Client and Database services,  tests  base    mongodb_watchdog  logger  PSR-3 compliant logger with a built-in UI", 
            "title": "Working"
        }, 
        {
            "location": "/#not-yet-ported", 
            "text": "These modules exist for earlier Drupal versions, but have not been ported to\nDrupal 8 yet. Some of them might never be ported because they are no longer\nrelevant in Drupal 8     Module  Information      mongodb_block  Store Drupal blocks in MongoDB    mongodb_block_ui  Provide a UI to manager blocks stored in MongoDB. Depends on  mongodb_block .    mongodb_cache  Store cache information in MongoDB    mongodb_field_storage  Store entities and their fields in MongoDB    mongodb_migrate  Migrate SQL entities/fields to MongoDB. Depends on  mongodb_field_storage .    mongodb_queue  Implement a MongoDB backend for Queue API    mongodb_session  Store session information in MongoDB", 
            "title": "Not yet ported"
        }, 
        {
            "location": "/#planned", 
            "text": "These modules have no direct equivalent in earlier versions, but their\ndevelopment is being considered.     Module  Information      mongodb_debug  Provide low-level debug information. A D7 version exists on  mongodb_logger  but depends on the legacy  mongo  PHP extension. Futures versions will need the 1.4 version of the  mongodb  extension which implements the MongoDB APM specification.", 
            "title": "Planned"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/#legal-information", 
            "text": "This suite of modules is licensed under the General Public License, version 2 or later (GPL-2.0+).  MongoDB is a registered trademark of MongoDB Inc.  Drupal is a registered trademark of Dries Buytaert.", 
            "title": "Legal information"
        }, 
        {
            "location": "/modules/mongodb/", 
            "text": "Driver: \nmongodb", 
            "title": "Driver: mongodb"
        }, 
        {
            "location": "/modules/mongodb/#driver-mongodb", 
            "text": "", 
            "title": "Driver: mongodb"
        }, 
        {
            "location": "/modules/mongodb_watchdog/", 
            "text": "Logger: \nmongodb_watchdog", 
            "title": "Logger: mongodb_watchdog"
        }, 
        {
            "location": "/modules/mongodb_watchdog/#logger-mongodb_watchdog", 
            "text": "", 
            "title": "Logger: mongodb_watchdog"
        }, 
        {
            "location": "/bespoke/", 
            "text": "Bespoke code\n\n\nBeyond the simple use cases covered by this standard package, most uses of\nMongoDB in Drupal projects appear in enteprise-class bespoke developments. Until\nthis version, this usually meant totally custom code, built either straight from\nthe legacy \nmongo\n extension, or on top of the Doctrine ODM for MongoDB,\nsuffering from a total lack of integration with the underlying core Drupal CMS.\n\n\nStarting with 8.x-2.0, such one-off code can be developed on top of the base\n\nmongodb\n module: unlike earlier releases, 8.x-2.x uses the PHP-standard\nconnection methods and options, without deviation, adding only a thin layer of\nDrupal adaptation on top of the standard \nmongodb\n \nextension\n and\n\nPHP library\n.\n\n\nExample\n\n\nThe familiar Drupal alias mechanism for databases is available to provide easy,\nstring-referenced access to \nClient\n and \nDatabase\n instances through the\npackage-provided \nClientFactory\n and \nDatabaseFactory\n services respectively.\n\n\nMost such code is likely to be service based, so here is an example of a service\n\nbar\n in module \nfoo\n, using a custom \nfoo-database\n aliased as \nfoodb\n, to keep\nits storage separate from the main database used by the package modules, and its\nlogic independent of other Drupal modules.\n\n\nPer-environment settings\n\n\nThe site local settings file includes the alias definition, binding it to the\nactual database credentials, allowing for per-environment configuration:\n\n\n?php\n// settings.local.php\n$settings['mongodb'] = [\n  'clients' =\n [\n    // Client alias =\n constructor parameters.\n    'default' =\n [\n      'uri' =\n 'mongodb://localhost:27017',\n      'uriOptions' =\n [],\n      'driverOptions' =\n [],\n    ],\n  ],\n  'databases' =\n [\n    // Collection alias =\n [ client_alias, collection_name ]\n    'default' =\n ['default', 'drupal'],\n    'logger' =\n ['default', 'logger'],\n    'foodb' =\n ['default', 'foo-database'],\n  ],\n];\n\n\n\nWith such a configuration, the \nfoodb\n alias is available to all MongoDB-using\nmodules in the site, possibly pointing to different databases depending on the\nenvironment (development, staging, production...).\n\n\nService-based module adapter\n\n\nThe \nfoo.services.yml\n service file for the bespoke \nfoo.module\n can then\nreference \nfoodb\n to access the database with a constant alias, regardless\nof the environment:\n\n\n// modules/custom/Foo/foo.services.yml\nservices:\n    foo.storage:\n      class: 'MongoDB\\Database'\n      factory: ['@mongodb.database_factory', 'get']\n      arguments: ['foodb']\n\n    foo.bar:\n      class: 'Drupal\\foo\\Bar'\n      arguments: ['@foo.storage', '$logger.channel.foo']\n\n\n\nThis allows services in the module to access the database in both function code\nfor Drupal hooks, and OO code for component-level logic without having to be\nenvironment-aware.\n\n\nIf the \nmongodb_watchdog\n module is enabled, the logger passed to the\napplication will be a standard PSR-3 logger writing to MongoDB without the\napplication having to know anything about it, but still providing a standard\nDrupal UI to examine the application logs.\n\n\nComponent logic\n\n\nFinally the component application logic can use the services without receiving\nany Drupal-specific dependency. In this example, we can simply assume the\nservice code is located within the module itself, for simplicity:\n\n\n?php\n// modules/custom/Foo/src/Bar.php\nuse MongoDb\\Database;\nuse Psr\\Log\\LoggerInterface;\n\npublic function __construct(Database $database, LoggerInterface $logger) {\n  $this-\ndatabase = $database;\n  $this-\nlogger = $logger;\n}\n\npublic function baz() {\n  // Perform some business logic using $this-\ndatabase.\n  // Log it using $this-\nlogger.\n}\n\n\n\nHaving the code only receive standard services (like a PSR-3 logger) or\n\nPHP library\n classes allows it to be written as an agnostic component that can\nbe brought in using Composer and shared with non-Drupal code. This is often\nuseful in bespoke projects, which tend to combine Drupal with other parts of the\napplication written in Laravel or Symfony standard edition, since the code has\nno Drupal-specific dependency.\n\n\nTests\n\n\nThe \nmongodb\n module provides a \nMongoDbTestBase\n base test class allowing\nkernel-based integration tests, as described on the \ntests\n page.", 
            "title": "Bespoke code"
        }, 
        {
            "location": "/bespoke/#bespoke-code", 
            "text": "Beyond the simple use cases covered by this standard package, most uses of\nMongoDB in Drupal projects appear in enteprise-class bespoke developments. Until\nthis version, this usually meant totally custom code, built either straight from\nthe legacy  mongo  extension, or on top of the Doctrine ODM for MongoDB,\nsuffering from a total lack of integration with the underlying core Drupal CMS.  Starting with 8.x-2.0, such one-off code can be developed on top of the base mongodb  module: unlike earlier releases, 8.x-2.x uses the PHP-standard\nconnection methods and options, without deviation, adding only a thin layer of\nDrupal adaptation on top of the standard  mongodb   extension  and PHP library .", 
            "title": "Bespoke code"
        }, 
        {
            "location": "/bespoke/#example", 
            "text": "The familiar Drupal alias mechanism for databases is available to provide easy,\nstring-referenced access to  Client  and  Database  instances through the\npackage-provided  ClientFactory  and  DatabaseFactory  services respectively.  Most such code is likely to be service based, so here is an example of a service bar  in module  foo , using a custom  foo-database  aliased as  foodb , to keep\nits storage separate from the main database used by the package modules, and its\nlogic independent of other Drupal modules.", 
            "title": "Example"
        }, 
        {
            "location": "/bespoke/#per-environment-settings", 
            "text": "The site local settings file includes the alias definition, binding it to the\nactual database credentials, allowing for per-environment configuration:  ?php\n// settings.local.php\n$settings['mongodb'] = [\n  'clients' =  [\n    // Client alias =  constructor parameters.\n    'default' =  [\n      'uri' =  'mongodb://localhost:27017',\n      'uriOptions' =  [],\n      'driverOptions' =  [],\n    ],\n  ],\n  'databases' =  [\n    // Collection alias =  [ client_alias, collection_name ]\n    'default' =  ['default', 'drupal'],\n    'logger' =  ['default', 'logger'],\n    'foodb' =  ['default', 'foo-database'],\n  ],\n];  With such a configuration, the  foodb  alias is available to all MongoDB-using\nmodules in the site, possibly pointing to different databases depending on the\nenvironment (development, staging, production...).", 
            "title": "Per-environment settings"
        }, 
        {
            "location": "/bespoke/#service-based-module-adapter", 
            "text": "The  foo.services.yml  service file for the bespoke  foo.module  can then\nreference  foodb  to access the database with a constant alias, regardless\nof the environment:  // modules/custom/Foo/foo.services.yml\nservices:\n    foo.storage:\n      class: 'MongoDB\\Database'\n      factory: ['@mongodb.database_factory', 'get']\n      arguments: ['foodb']\n\n    foo.bar:\n      class: 'Drupal\\foo\\Bar'\n      arguments: ['@foo.storage', '$logger.channel.foo']  This allows services in the module to access the database in both function code\nfor Drupal hooks, and OO code for component-level logic without having to be\nenvironment-aware.  If the  mongodb_watchdog  module is enabled, the logger passed to the\napplication will be a standard PSR-3 logger writing to MongoDB without the\napplication having to know anything about it, but still providing a standard\nDrupal UI to examine the application logs.", 
            "title": "Service-based module adapter"
        }, 
        {
            "location": "/bespoke/#component-logic", 
            "text": "Finally the component application logic can use the services without receiving\nany Drupal-specific dependency. In this example, we can simply assume the\nservice code is located within the module itself, for simplicity:  ?php\n// modules/custom/Foo/src/Bar.php\nuse MongoDb\\Database;\nuse Psr\\Log\\LoggerInterface;\n\npublic function __construct(Database $database, LoggerInterface $logger) {\n  $this- database = $database;\n  $this- logger = $logger;\n}\n\npublic function baz() {\n  // Perform some business logic using $this- database.\n  // Log it using $this- logger.\n}  Having the code only receive standard services (like a PSR-3 logger) or PHP library  classes allows it to be written as an agnostic component that can\nbe brought in using Composer and shared with non-Drupal code. This is often\nuseful in bespoke projects, which tend to combine Drupal with other parts of the\napplication written in Laravel or Symfony standard edition, since the code has\nno Drupal-specific dependency.", 
            "title": "Component logic"
        }, 
        {
            "location": "/bespoke/#tests", 
            "text": "The  mongodb  module provides a  MongoDbTestBase  base test class allowing\nkernel-based integration tests, as described on the  tests  page.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/", 
            "text": "The newly ported modules have some test coverage, which can be checked with\nPHPUnit.\n\n\nPHPUnit\n\n\nWriting custom tests\n\n\nThe \nmongodb\n module provides a \nDrupal\\mongodb\\Tests\\MongoDbTestBase\n base\nclass on which to build custom kernel tests for \nbespoke\n modules, as\nit provides a per-test database created during test \nsetUp()\n, and\ndropped during \ntearDown()\n.\n\n\nRunning tests\n\n\nWith the Simpletest UI apparently going away in Drupal 8.2 (cf \n#2566767\n,\n\n#2750461\n), tests should be run from the command line.\n\n\nRunning directly\n\n\nThe typical full command to run tests looks like this (\n\\\n is to avoid too long a line):\n\n\nMONGODB_URI=mongodb://somemongohost:27017 \\\nSIMPLETEST_DB=mysql://someuser:somepassword@localhost/somedatabase \\\nphpunit -c core/phpunit.xml.dist\n\n\n\n\n\nOptional: \nMONGODB_URI\n points to a working MongoDB instance. This variable is optional:\n  if it is not provided, the tests will default to \nmongodb://localhost:27017\n.\n\n\nRequired: \nSIMPLETEST_DB\n is the standard Drupal 8 variable needed to run tests that\n  can need the database service.\n\n\n\n\nBoth variables can be set in the \ncore/phpunit.xml\n custom configuration file.\n\n\nUsing a \nphpunit.xml\n configuration file\n\n\nThe test command can also be simplified using a \nphpunit.xml\n configuration file:\n\n\nphpunit -c core/phpunit.xml\n\n\n\nOr to generate a coverage report:\n\n\nphpunit -c core/phpunit.xml --coverage-html=/some/coverage/path modules/contrib/mongodb\n\n\n\n\n\ncore/phpunit.xml\n is a local copy of the default \ncore/phpunit.xml.dist\n\n  configuration file, tweaked to only test the minimum set of files needed by\n  the test suite.\n\n\nIt can look like this, to obtain a coverage report not including the whole\n  Drupal tree, but just the MongoDB package itself:\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\nphpunit ...snip...\n\n  \nphp\n\n    \nenv name=\"SIMPLETEST_DB\" value=\"mysql://someuser:somepass@somesqlhost/somedb\"/\n\n    \nenv name=\"MONGODB_URI\" value=\"mongodb://somemongohost:27017\" /\n\n  \n/php\n\n  \ntestsuites ...snip...\n...snip...\n/testsuites\n\n  \nlisteners\n...snip...\n/listener\n\n  \n/listeners\n\n  \nfilter\n\n    \nwhitelist\n\n      \ndirectory\n../modules/contrib/mongodb\n/directory\n\n      \nexclude\n\n        \ndirectory\n../modules/contrib/mongodb/modules/mongodb/src/Tests\n/directory\n\n        \ndirectory suffix=\"Test.php\"\n./\n/directory\n\n        \ndirectory suffix=\"TestBase.php\"\n./\n/directory\n\n      \n/exclude\n\n     \n/whitelist\n\n  \n/filter\n\n\n/phpunit", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#phpunit", 
            "text": "", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/tests/#writing-custom-tests", 
            "text": "The  mongodb  module provides a  Drupal\\mongodb\\Tests\\MongoDbTestBase  base\nclass on which to build custom kernel tests for  bespoke  modules, as\nit provides a per-test database created during test  setUp() , and\ndropped during  tearDown() .", 
            "title": "Writing custom tests"
        }, 
        {
            "location": "/tests/#running-tests", 
            "text": "With the Simpletest UI apparently going away in Drupal 8.2 (cf  #2566767 , #2750461 ), tests should be run from the command line.", 
            "title": "Running tests"
        }, 
        {
            "location": "/tests/#running-directly", 
            "text": "The typical full command to run tests looks like this ( \\  is to avoid too long a line):  MONGODB_URI=mongodb://somemongohost:27017 \\\nSIMPLETEST_DB=mysql://someuser:somepassword@localhost/somedatabase \\\nphpunit -c core/phpunit.xml.dist   Optional:  MONGODB_URI  points to a working MongoDB instance. This variable is optional:\n  if it is not provided, the tests will default to  mongodb://localhost:27017 .  Required:  SIMPLETEST_DB  is the standard Drupal 8 variable needed to run tests that\n  can need the database service.   Both variables can be set in the  core/phpunit.xml  custom configuration file.", 
            "title": "Running directly"
        }, 
        {
            "location": "/tests/#using-a-phpunitxml-configuration-file", 
            "text": "The test command can also be simplified using a  phpunit.xml  configuration file:  phpunit -c core/phpunit.xml  Or to generate a coverage report:  phpunit -c core/phpunit.xml --coverage-html=/some/coverage/path modules/contrib/mongodb   core/phpunit.xml  is a local copy of the default  core/phpunit.xml.dist \n  configuration file, tweaked to only test the minimum set of files needed by\n  the test suite.  It can look like this, to obtain a coverage report not including the whole\n  Drupal tree, but just the MongoDB package itself: ?xml version=\"1.0\" encoding=\"UTF-8\"?  phpunit ...snip... \n   php \n     env name=\"SIMPLETEST_DB\" value=\"mysql://someuser:somepass@somesqlhost/somedb\"/ \n     env name=\"MONGODB_URI\" value=\"mongodb://somemongohost:27017\" / \n   /php \n   testsuites ...snip... ...snip... /testsuites \n   listeners ...snip... /listener \n   /listeners \n   filter \n     whitelist \n       directory ../modules/contrib/mongodb /directory \n       exclude \n         directory ../modules/contrib/mongodb/modules/mongodb/src/Tests /directory \n         directory suffix=\"Test.php\" ./ /directory \n         directory suffix=\"TestBase.php\" ./ /directory \n       /exclude \n      /whitelist \n   /filter  /phpunit", 
            "title": "Using a phpunit.xml configuration file"
        }
    ]
}