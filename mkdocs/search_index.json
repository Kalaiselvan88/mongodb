{
    "docs": [
        {
            "location": "/", 
            "text": "MongoDB\n suite for Drupal\n\n\nThe MongoDB suite for Drupal 8 is a set of modules enabling the storage of\nvarious types of data on a Drupal site in mongodb.\nThis is a addition to the standard SQL storage used by Drupal.\n\n\nIt comprises several Drupal modules, each implementing a specific functionality.\nWith the exception of the base \nmongodb\n module, upon which all others depend\nbecause it provides the standardized connection service to Drupal, all the\nmodules are independent of each other except where indicated.\n\n\nThe \nmongodb\n module is not just the basis for this package, but also is\ndesigned to ease the development of bespoke code for end-user projects,\nproviding Drupal-integrated Symfony services for Client and Database with a\nfamiliar alias-based selection, like the SQL database drivers do.\n\n\nModules\n\n\nExisting\n\n\n\n\n\n\n\n\nModule\n\n\nIn a word\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nmongodb\n\n\ndriver\n\n\nMongoDB Client and Database services, \ntests\n base\n\n\n\n\n\n\nmongodb_storage\n\n\nkey-value\n\n\nKey-value store, with server-side expiration\n\n\n\n\n\n\nmongodb_watchdog\n\n\nlogger\n\n\nPSR-3 compliant logger with a built-in UI\n\n\n\n\n\n\n\n\nPlanned\n\n\nThese modules have no direct equivalent in earlier versions, but their\ndevelopment is being considered.\n\n\n\n\n\n\n\n\nModule\n\n\nInformation\n\n\n\n\n\n\n\n\n\n\nmongodb_debug\n\n\nProvide low-level debug information. A D7 version exists on \nmongodb_logger\n but depends on the legacy \nmongo\n PHP extension. Futures versions will need the 1.4 version of the \nmongodb\n extension which implements the MongoDB APM specification.\n\n\n\n\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nLegal information\n\n\n\n\nThis suite of modules is licensed under the General Public License, v2.0 or later (GPL-2.0-or-later).\n\n\nMongoDB is a registered trademark of MongoDB Inc.\n\n\nDrupal is a registered trademark of Dries Buytaert.", 
            "title": "Home"
        }, 
        {
            "location": "/#mongodb-suite-for-drupal", 
            "text": "The MongoDB suite for Drupal 8 is a set of modules enabling the storage of\nvarious types of data on a Drupal site in mongodb.\nThis is a addition to the standard SQL storage used by Drupal.  It comprises several Drupal modules, each implementing a specific functionality.\nWith the exception of the base  mongodb  module, upon which all others depend\nbecause it provides the standardized connection service to Drupal, all the\nmodules are independent of each other except where indicated.  The  mongodb  module is not just the basis for this package, but also is\ndesigned to ease the development of bespoke code for end-user projects,\nproviding Drupal-integrated Symfony services for Client and Database with a\nfamiliar alias-based selection, like the SQL database drivers do.", 
            "title": "MongoDB&reg; suite for Drupal&reg;"
        }, 
        {
            "location": "/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/#existing", 
            "text": "Module  In a word  Information      mongodb  driver  MongoDB Client and Database services,  tests  base    mongodb_storage  key-value  Key-value store, with server-side expiration    mongodb_watchdog  logger  PSR-3 compliant logger with a built-in UI", 
            "title": "Existing"
        }, 
        {
            "location": "/#planned", 
            "text": "These modules have no direct equivalent in earlier versions, but their\ndevelopment is being considered.     Module  Information      mongodb_debug  Provide low-level debug information. A D7 version exists on  mongodb_logger  but depends on the legacy  mongo  PHP extension. Futures versions will need the 1.4 version of the  mongodb  extension which implements the MongoDB APM specification.", 
            "title": "Planned"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/#legal-information", 
            "text": "This suite of modules is licensed under the General Public License, v2.0 or later (GPL-2.0-or-later).  MongoDB is a registered trademark of MongoDB Inc.  Drupal is a registered trademark of Dries Buytaert.", 
            "title": "Legal information"
        }, 
        {
            "location": "/install/", 
            "text": "Installation and Settings\n\n\nPrerequisites\n\n\nThe MongoDB module and sub-modules need some configuration to be useful. This\nguide assumes that :\n\n\n\n\na \nMongoDB\n 3.0 to 4.0 server instance is already installed, configured, and\n  available to connect to from the Drupal instance.\n\n\nthe site will be running \nDrupal\n 8.[56].x, with \nDrush\n 8.x.\n\n\nthe \nmongodb\n (not \nmongo\n) PHP extension version 1.1.7 or\n  later is installed and configured.\n\n\nPHP is version 7.[01].x. At this point, \nPHP 7.2.x\n might not pass the\n  test suite. It should be compatible by the time Drupal 8.6.0 is released.\n\n\n\n\nNOTE\n : There is a plan to support Drush 9.x and it can be tracked \nhere\n\n\nIn a nutshell, any MongoDB server \n=3.6, PHP extension \n= 1.3.4, MongoDB PHP library \n= 1.2.0 and PHP version \n= 7.1. We recommend using composer for installing this module. For details refer \nbelow\n.\n\n\nFor more details about MongoDB extension and library for PHP check \nhere\n\n\nSome more links for you:\n\n\n\n\nMongoDB Mac installation\n\n\nMongoDB LINUX installation\n\n\nMongoDB Windows installation\n\n\n\n\nIf MongoDB 3.0 to 4.0 is installed on \nlocalhost:27017\n and \nmongod\n was started\nwith the \n\u2013httpinterface\n option, you may view the web admin interface:\n\n\nhttp://localhost:28017/\n\n\n\nSettings Configuration\n\n\n\n\nDownload the module package, as per\n  \nInstalling contributed modules (Drupal 8)\n\n\nCopy the relevant section from the \nmongodb/example.settings.local.php\n to\n  your \nsettings.local.php\n file if you use one, or \nsettings.php\n otherwise,\n  and adapt it to match your MongoDB settings. These settings are used by the\n  \nmongodb\n module to connect to your MongoDB servers, with the \ndefault\n server\n   being the one started in previous steps.\n\n\nThe \nclients\n key contains an associative array of connection by\n    connection alias, with the default connection parameters being under the\n    \ndefault\n key, and additional keys allowing the use of other\n    servers/clusters.\n\n\nThe \ndatabases\n key contains an associative array of server/database pairs\n    by database alias, with the default Drupal database being under the\n    \ndefault\n key, and additional keys allowing modules to use their own\n    database to avoid stepping on each other's toes. This is especially useful\n    for bespoke modules created for the needs of a specific site, which can thus\n    use their own databases, possibly located on other MongoDB clusters.\n    For example, with the following settings:\n\n\n\n\n// In sites/default/settings.local.php.\n$settings['mongodb'] = [\n  'clients' =\n [\n    // Client alias =\n connection constructor parameters.\n    'default' =\n [\n      'uri' =\n 'mongodb://localhost:27017',\n      'uriOptions' =\n [],\n      'driverOptions' =\n [],\n    ],\n  ],\n  'databases' =\n [\n    // Database alias =\n [ client_alias, database_name ]\n    'default' =\n ['default', 'drupal'],\n    'keyvalue' =\n ['default', 'keyvalue'],\n    'logger' =\n ['default', 'logger'],\n  ],\n];\n\n\n\n\n\n\nWith these settings:\n\n\nthe \ndefault\n database alias will handle collections in the \ndrupal\n\n  database on the \ndefault\n MongoDB server installed in earlier steps\n\n\nthe \nkeyvalue\n database alias will store key-value collections on the\n  same \ndefault\n MongoDB server, but in a separate \nkeyvalue\n database.\n\n\nthe \nlogger\n database alias will store logger collections on the same\n  \ndefault\n MongoDB server, but in a separate \nlogger\n database.\n\n\n\n\n\n\nTo use the MongoDB Key-Value (Expirable) storage:\n\n\nensure there is a \nkeyvalue\n database alias in \nsettings.local.php\n, like\nin the previous lines.\n\n\ndeclare MongoDB as the default keyvalue storage implementation by editing\nthe existing declarations in the \nsites/default/services.yml\n file:\n\n\n\n\n\n\n\n\n# In sites/default/services.yml.\nfactory.keyvalue:\n  default: keyvalue.mongodb\nfactory.keyvalue.expirable:\n  keyvalue_expirable_default: keyvalue.expirable.mongodb\n\n\n\n\nInstallation\n\n\n\n\nEnable the \nmongodb_storage\n module, e.g. using \ndrush en mongodb_storage\n.\n\n\nImport the existing Key-Value contents from the database, using the Drush\n    \nmongodb_storage-import-keyvalue\n command: \ndrush most-ikv\n. It will output\n    the list of imported keys, for your information, like:\n\n\n\n\nkey_value\n  config.entity.key_store.action\n    uuid:054e62b3-1c40-4f22-aa17-c092bd796ee8\n    uuid:0cfd15f5-c01a-4912-991c-ad10e934f86e\n(...lots of line, then...)\nkey_value_expire\n  update_available_releases\n    drupal\n\n\n\n\n\n\nrebuild the container to take these changes into account using \ndrush cr\n.\n\n\n\n\nOnce the module is installed and enabled, you can check its requirements on\n\n/admin/reports/status\n:\n\n\n\n\nComposer Requirements\n\n\n\n\n\n\nThis section is applicable if you are using composer already in your site to\n  manage module dependencies. Know more about composer \nhere\n.\n\n\n\n\n\n\nAt the root of your site\n\n\n\n\n\n\nIf you are using the \ndrupal-composer/drupal-project\n skeleton, just add\n  this package:\n\n\ncomposer require drupal/mongodb \"^2.0.0\"\n\n\n\n\n\n\nOtherwise also add a composer requirement by typing:\n\n\ncomposer require drupal/mongodb \"^2.0.0\"\n\n\ncomposer require mongodb/mongodb \"^1.2.0\"\n\n\n\n\n\n\nIf this is the first Composer dependency on the project, run:\n\n\ncomposer install\n\n\n\n\n\n\n\n\n\n\nEnable the \nmongodb\n module. You now have access to the MongoDB services and\n  Drush commands for the \nmongodb\n module.\n\n\n\n\n\n\nNote that there is currently a bug with Composer-based deployment from packages.drupal.org/8 : \n#2985860: packages.drupal.org/8 serves incorrect composer.json for module mongodb\n. The workaround is:\n\n\n\n\nEither require mongodb/mongodb directly in the root composer.json of the project\n\n\nAdd a repositories entry with \n\"type\": \"vcs\"\n and \n\"url\": \"https://github.com/fgm/mongodb.git\"\n in the root \ncomposer.json\n, and require the \n\"drupal/mongodb\":\"dev-8.x-2.x\"\n instead of the d.o.-rewritten format for semantic versioning \n\"drupal/mongodb\":\"^2.0\"\n\n\n\n\nOnce this issue is fixed, these workarounds will no longer be necessary.", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#installation-and-settings", 
            "text": "", 
            "title": "Installation and Settings"
        }, 
        {
            "location": "/install/#prerequisites", 
            "text": "The MongoDB module and sub-modules need some configuration to be useful. This\nguide assumes that :   a  MongoDB  3.0 to 4.0 server instance is already installed, configured, and\n  available to connect to from the Drupal instance.  the site will be running  Drupal  8.[56].x, with  Drush  8.x.  the  mongodb  (not  mongo ) PHP extension version 1.1.7 or\n  later is installed and configured.  PHP is version 7.[01].x. At this point,  PHP 7.2.x  might not pass the\n  test suite. It should be compatible by the time Drupal 8.6.0 is released.   NOTE  : There is a plan to support Drush 9.x and it can be tracked  here  In a nutshell, any MongoDB server  =3.6, PHP extension  = 1.3.4, MongoDB PHP library  = 1.2.0 and PHP version  = 7.1. We recommend using composer for installing this module. For details refer  below .  For more details about MongoDB extension and library for PHP check  here  Some more links for you:   MongoDB Mac installation  MongoDB LINUX installation  MongoDB Windows installation   If MongoDB 3.0 to 4.0 is installed on  localhost:27017  and  mongod  was started\nwith the  \u2013httpinterface  option, you may view the web admin interface:  http://localhost:28017/", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/install/#settings-configuration", 
            "text": "Download the module package, as per\n   Installing contributed modules (Drupal 8)  Copy the relevant section from the  mongodb/example.settings.local.php  to\n  your  settings.local.php  file if you use one, or  settings.php  otherwise,\n  and adapt it to match your MongoDB settings. These settings are used by the\n   mongodb  module to connect to your MongoDB servers, with the  default  server\n   being the one started in previous steps.  The  clients  key contains an associative array of connection by\n    connection alias, with the default connection parameters being under the\n     default  key, and additional keys allowing the use of other\n    servers/clusters.  The  databases  key contains an associative array of server/database pairs\n    by database alias, with the default Drupal database being under the\n     default  key, and additional keys allowing modules to use their own\n    database to avoid stepping on each other's toes. This is especially useful\n    for bespoke modules created for the needs of a specific site, which can thus\n    use their own databases, possibly located on other MongoDB clusters.\n    For example, with the following settings:   // In sites/default/settings.local.php.\n$settings['mongodb'] = [\n  'clients' =  [\n    // Client alias =  connection constructor parameters.\n    'default' =  [\n      'uri' =  'mongodb://localhost:27017',\n      'uriOptions' =  [],\n      'driverOptions' =  [],\n    ],\n  ],\n  'databases' =  [\n    // Database alias =  [ client_alias, database_name ]\n    'default' =  ['default', 'drupal'],\n    'keyvalue' =  ['default', 'keyvalue'],\n    'logger' =  ['default', 'logger'],\n  ],\n];   With these settings:  the  default  database alias will handle collections in the  drupal \n  database on the  default  MongoDB server installed in earlier steps  the  keyvalue  database alias will store key-value collections on the\n  same  default  MongoDB server, but in a separate  keyvalue  database.  the  logger  database alias will store logger collections on the same\n   default  MongoDB server, but in a separate  logger  database.    To use the MongoDB Key-Value (Expirable) storage:  ensure there is a  keyvalue  database alias in  settings.local.php , like\nin the previous lines.  declare MongoDB as the default keyvalue storage implementation by editing\nthe existing declarations in the  sites/default/services.yml  file:     # In sites/default/services.yml.\nfactory.keyvalue:\n  default: keyvalue.mongodb\nfactory.keyvalue.expirable:\n  keyvalue_expirable_default: keyvalue.expirable.mongodb", 
            "title": "Settings Configuration"
        }, 
        {
            "location": "/install/#installation", 
            "text": "Enable the  mongodb_storage  module, e.g. using  drush en mongodb_storage .  Import the existing Key-Value contents from the database, using the Drush\n     mongodb_storage-import-keyvalue  command:  drush most-ikv . It will output\n    the list of imported keys, for your information, like:   key_value\n  config.entity.key_store.action\n    uuid:054e62b3-1c40-4f22-aa17-c092bd796ee8\n    uuid:0cfd15f5-c01a-4912-991c-ad10e934f86e\n(...lots of line, then...)\nkey_value_expire\n  update_available_releases\n    drupal   rebuild the container to take these changes into account using  drush cr .   Once the module is installed and enabled, you can check its requirements on /admin/reports/status :", 
            "title": "Installation"
        }, 
        {
            "location": "/install/#composer-requirements", 
            "text": "This section is applicable if you are using composer already in your site to\n  manage module dependencies. Know more about composer  here .    At the root of your site    If you are using the  drupal-composer/drupal-project  skeleton, just add\n  this package:  composer require drupal/mongodb \"^2.0.0\"    Otherwise also add a composer requirement by typing:  composer require drupal/mongodb \"^2.0.0\"  composer require mongodb/mongodb \"^1.2.0\"    If this is the first Composer dependency on the project, run:  composer install      Enable the  mongodb  module. You now have access to the MongoDB services and\n  Drush commands for the  mongodb  module.    Note that there is currently a bug with Composer-based deployment from packages.drupal.org/8 :  #2985860: packages.drupal.org/8 serves incorrect composer.json for module mongodb . The workaround is:   Either require mongodb/mongodb directly in the root composer.json of the project  Add a repositories entry with  \"type\": \"vcs\"  and  \"url\": \"https://github.com/fgm/mongodb.git\"  in the root  composer.json , and require the  \"drupal/mongodb\":\"dev-8.x-2.x\"  instead of the d.o.-rewritten format for semantic versioning  \"drupal/mongodb\":\"^2.0\"   Once this issue is fixed, these workarounds will no longer be necessary.", 
            "title": "Composer Requirements"
        }, 
        {
            "location": "/modules/mongodb/", 
            "text": "Driver: \nmongodb\n\n\nThe \nmongodb\n module is the main module in the suite, providing a thin Drupal\nadapter for the standard MongoDB PHP library, in the form of two factory\nservices and a base test class.\n\n\nFactories\n\n\nThe basic idea of these factory services is to provide a way to create\ninstances of the standard \nClient\n and \nDatabase\n classes from a simple alias\nstring, taking all properties initialized during these creations from the\nDrupal standard \nSettings\n object.\n\n\nThis allows code to be unaware of the execution environment, referring to\ndatabase or client by a functional alias, while the specifics of accessing\nthe relevant \nmongod\n/\nmongos\n and database are left to per-environment\nsettings,\n\n\n\n\nDrupal\\mongodb\\DatabaseFactory\n : This is the recommended entry point for\n  most applications, returning a \nMongoDb\\Database\n from a simple alias string.\n\n\n__construct(ClientFactory $client_factory, Settings $settings)\n. This is\n  normally invoked by the container, to which the class is exposed as\n  \nmongodb.database_factory\n.\n\n\nget(string $alias): MongoDb\\Database\n; returns a \nDatabase\n instance\n  matching the value defined in Drupal settings for \n$alias\n.\n\n\n\n\n\n\nDrupal\\mongodb\\ClientFactory\n: This one may be needed for more complex\n  applications, e.g. those wishing to handle operations spanning connections\n  to multiple MongoDB replica sets/sharded clusters.\n\n\n__construct(Settings $settings)\n. This is normally invoked by the\n  container, to which the class is exposed as \nmongodb.client_factory\n.\n\n\nget(string $alias): MongoDb\\Client\n; returns a \nClient\n instance matching\n  the value defined in Drupal settings for \n$alias\n.\n\n\n\n\n\n\n\n\nTest base class\n\n\nThe module provides a \n\\Drupal\\mongodb\\Tests\\MongoDbTestBase\n extending core\nclass \nKernelTestBase\n. This allows modules to define their own integration\ntests using the module services, and taking advantage of running in a per-test\ndatabase. What it actually provides:\n\n\n\n\nTest instance properties:\n\n\n$this-\nuri\n contains a MongoDB URI suitable for connecting to a default\nclient, taken from the value of the \nMONGODB_URI\n variable is passed in the\nenvironment, on the PHPUnit command line, or in the \nphpunit.xml\n\nconfiguration file, this will be its value, otherwise it will be set to the\ntraditional MongoDB default instance: \nmongodb://localhost:27017\n.\n\n\n$this-\nsettings\n contains a test-specific instance of core \nSettings\n,\nlimited to the \nmongodb\n settings key. The default database in these\nsettings is a temporary database defined by the Simpletest prefix, allowing\nit to be used without interacting with the rest of the site, and dropped\nduring test teardown.\n\n\n\n\n\n\nConstants: in addition to the ones used by the \nmongodb\n tests, the base test\n  defines constants usable by child tests:\n\n\nCLIENT_TEST_ALIAS\n is the alias for the default MongoDB test client\n\n\nDB_DEFAULT_ALIAS\n is the alias for the default test database\n\n\n\n\n\n\nModules:\n\n\nThe test base enabled the \nmongodb\n modules, since all modules using MongoDB\nare expected to depend on it.\n\n\nModule tests will typically want their own module enabled, so they will need\nto add to \nstatic::$modules\n instead of redefining it, to avoid losing the\n\nmongodb\n module.\n\n\n\n\n\n\nsetUp()\n / \ntearDown()\n:\n\n\nTests need to invoke \nparent::setUp()\n near the top of their own \nsetUp()\n,\n  to have the test base define the properties before doing their own work.\n\n\nTests need to invoke \nparent::tearDown()\n near the end of their own\n  \ntearDown()\n - if any - to drop the default test database.\n\n\nTests needing non-default test databases need to extend \n$this-\nsettings\n\n  to add their own database alias after invoking \nparent::setUp()\n, and need\n  to drop that database during their own \ntearDown()\n. They can use\n  \n$this-\ngetTestDatabaseName($postfix)\n method to build a per-test\n  database name that will not collide with the default database.\n\n\n\n\n\n\n\n\nA complete example of how to write a test using that base class is given on the\n\ntests\n page.", 
            "title": "Driver: `mongodb`"
        }, 
        {
            "location": "/modules/mongodb/#driver-mongodb", 
            "text": "The  mongodb  module is the main module in the suite, providing a thin Drupal\nadapter for the standard MongoDB PHP library, in the form of two factory\nservices and a base test class.", 
            "title": "Driver: mongodb"
        }, 
        {
            "location": "/modules/mongodb/#factories", 
            "text": "The basic idea of these factory services is to provide a way to create\ninstances of the standard  Client  and  Database  classes from a simple alias\nstring, taking all properties initialized during these creations from the\nDrupal standard  Settings  object.  This allows code to be unaware of the execution environment, referring to\ndatabase or client by a functional alias, while the specifics of accessing\nthe relevant  mongod / mongos  and database are left to per-environment\nsettings,   Drupal\\mongodb\\DatabaseFactory  : This is the recommended entry point for\n  most applications, returning a  MongoDb\\Database  from a simple alias string.  __construct(ClientFactory $client_factory, Settings $settings) . This is\n  normally invoked by the container, to which the class is exposed as\n   mongodb.database_factory .  get(string $alias): MongoDb\\Database ; returns a  Database  instance\n  matching the value defined in Drupal settings for  $alias .    Drupal\\mongodb\\ClientFactory : This one may be needed for more complex\n  applications, e.g. those wishing to handle operations spanning connections\n  to multiple MongoDB replica sets/sharded clusters.  __construct(Settings $settings) . This is normally invoked by the\n  container, to which the class is exposed as  mongodb.client_factory .  get(string $alias): MongoDb\\Client ; returns a  Client  instance matching\n  the value defined in Drupal settings for  $alias .", 
            "title": "Factories"
        }, 
        {
            "location": "/modules/mongodb/#test-base-class", 
            "text": "The module provides a  \\Drupal\\mongodb\\Tests\\MongoDbTestBase  extending core\nclass  KernelTestBase . This allows modules to define their own integration\ntests using the module services, and taking advantage of running in a per-test\ndatabase. What it actually provides:   Test instance properties:  $this- uri  contains a MongoDB URI suitable for connecting to a default\nclient, taken from the value of the  MONGODB_URI  variable is passed in the\nenvironment, on the PHPUnit command line, or in the  phpunit.xml \nconfiguration file, this will be its value, otherwise it will be set to the\ntraditional MongoDB default instance:  mongodb://localhost:27017 .  $this- settings  contains a test-specific instance of core  Settings ,\nlimited to the  mongodb  settings key. The default database in these\nsettings is a temporary database defined by the Simpletest prefix, allowing\nit to be used without interacting with the rest of the site, and dropped\nduring test teardown.    Constants: in addition to the ones used by the  mongodb  tests, the base test\n  defines constants usable by child tests:  CLIENT_TEST_ALIAS  is the alias for the default MongoDB test client  DB_DEFAULT_ALIAS  is the alias for the default test database    Modules:  The test base enabled the  mongodb  modules, since all modules using MongoDB\nare expected to depend on it.  Module tests will typically want their own module enabled, so they will need\nto add to  static::$modules  instead of redefining it, to avoid losing the mongodb  module.    setUp()  /  tearDown() :  Tests need to invoke  parent::setUp()  near the top of their own  setUp() ,\n  to have the test base define the properties before doing their own work.  Tests need to invoke  parent::tearDown()  near the end of their own\n   tearDown()  - if any - to drop the default test database.  Tests needing non-default test databases need to extend  $this- settings \n  to add their own database alias after invoking  parent::setUp() , and need\n  to drop that database during their own  tearDown() . They can use\n   $this- getTestDatabaseName($postfix)  method to build a per-test\n  database name that will not collide with the default database.     A complete example of how to write a test using that base class is given on the tests  page.", 
            "title": "Test base class"
        }, 
        {
            "location": "/modules/mongodb_storage/", 
            "text": "Key-value: \nmongodb_storage\n\n\n@TODO", 
            "title": "Key-value: `mongodb_storage`"
        }, 
        {
            "location": "/modules/mongodb_storage/#key-value-mongodb_storage", 
            "text": "@TODO", 
            "title": "Key-value: mongodb_storage"
        }, 
        {
            "location": "/modules/mongodb_watchdog/", 
            "text": "Logger: \nmongodb_watchdog\n\n\nThe \nmongodb_watchdog\n module stores the watchdog entries for your Drupal site in MongoDB collection as mentioned in \nSettings Configuration\n\n\nThis module uses a separate database, using the \nlogger\n database alias in settings. Do NOT point that alias to the same database as \ndefault\n, because the module drops the \nlogger\n database when uninstalling, which would drop all your other data with it.\n\n\n\n\n\n\nmongodb.watchdog.items\n\n\n\n\nthe maximum item limit on the capped collection used by the module.\n\n\nif not defined, it defaults to 10000.\n\n\nthe actual (size-based) limit is derived from this variable, assuming 1 \nkiB\n per watchdog entry.\n\n\n\n\n\n\n\n\nmongodb.watchdog.limit\n\n\n\n\nthe maximum severity level (0 to 7, per RFC 5424) to save into watchdog.\n\n\nErrors below this level (with a higher numerical level) will be ignored by the module.\n\n\nIf not defined, all events will saved.\n\n\n\n\n\n\n\n\nmongodb.watchdog.items_per_page\n\n\n\n\nthe maximum number of events displayed on the event details page.\n\n\n\n\n\n\n\n\nmongodb_watchdog.request_tracking\n\n\n\n\nif true, enable the per-request event tracking.\n\n\nif not defined, it defaults to false because its cost is not entirely negligible.\n\n\nthis feature requires the use of mod_unique_id in Apache 2.x\n\n\n\n\n\n\n\n\nmongodb_watchdog.requests\n\n\n\n\nif request tracking is enabled, this setting defined the maximum requests limit on the capped collection used by the module.\n\n\nif not defined, it defaults to 100000.\n\n\nthe actual (size-based) limit is derived from this variable, assuming 1 \nkiB\n per tracker entry.\n\n\n\n\n\n\n\n\nSee \nDrupal\\Core\\Logger\\RfcLogLevel\n and \nPsr\\Log\\LogLevel\n for further information about severity levels.", 
            "title": "Logger: `mongodb_watchdog`"
        }, 
        {
            "location": "/modules/mongodb_watchdog/#logger-mongodb_watchdog", 
            "text": "The  mongodb_watchdog  module stores the watchdog entries for your Drupal site in MongoDB collection as mentioned in  Settings Configuration  This module uses a separate database, using the  logger  database alias in settings. Do NOT point that alias to the same database as  default , because the module drops the  logger  database when uninstalling, which would drop all your other data with it.    mongodb.watchdog.items   the maximum item limit on the capped collection used by the module.  if not defined, it defaults to 10000.  the actual (size-based) limit is derived from this variable, assuming 1  kiB  per watchdog entry.     mongodb.watchdog.limit   the maximum severity level (0 to 7, per RFC 5424) to save into watchdog.  Errors below this level (with a higher numerical level) will be ignored by the module.  If not defined, all events will saved.     mongodb.watchdog.items_per_page   the maximum number of events displayed on the event details page.     mongodb_watchdog.request_tracking   if true, enable the per-request event tracking.  if not defined, it defaults to false because its cost is not entirely negligible.  this feature requires the use of mod_unique_id in Apache 2.x     mongodb_watchdog.requests   if request tracking is enabled, this setting defined the maximum requests limit on the capped collection used by the module.  if not defined, it defaults to 100000.  the actual (size-based) limit is derived from this variable, assuming 1  kiB  per tracker entry.     See  Drupal\\Core\\Logger\\RfcLogLevel  and  Psr\\Log\\LogLevel  for further information about severity levels.", 
            "title": "Logger: mongodb_watchdog"
        }, 
        {
            "location": "/bespoke/", 
            "text": "Bespoke code\n\n\nBeyond the simple use cases covered by this standard package, most uses of\nMongoDB in Drupal projects appear in enteprise-class bespoke developments. Until\nthis version, this usually meant totally custom code, built either straight from\nthe legacy \nmongo\n extension, or on top of the Doctrine ODM for MongoDB,\nsuffering from a total lack of integration with the underlying core Drupal CMS.\n\n\nStarting with 8.x-2.0, such one-off code can be developed on top of the base\n\nmongodb\n module: unlike earlier releases, 8.x-2.x uses the PHP-standard\nconnection methods and options, without deviation, adding only a thin layer of\nDrupal adaptation on top of the standard \nmongodb\n \nextension\n and\n\nPHP library\n.\n\n\nExample\n\n\nThe familiar Drupal alias mechanism for databases is available to provide easy,\nstring-referenced access to \nClient\n and \nDatabase\n instances through the\npackage-provided \nClientFactory\n and \nDatabaseFactory\n services respectively.\n\n\nMost such code is likely to be service based, so here is an example of a service\n\nbar\n in module \nfoo\n, using a custom \nfoo-database\n aliased as \nfoodb\n, to keep\nits storage separate from the main database used by the package modules, and its\nlogic independent of other Drupal modules.\n\n\nPer-environment settings\n\n\nThe site local settings file includes the alias definition, binding it to the\nactual database credentials, allowing for per-environment configuration:\n\n\n?php\n// settings.local.php\n$settings['mongodb'] = [\n  'clients' =\n [\n    // Client alias =\n constructor parameters.\n    'default' =\n [\n      'uri' =\n 'mongodb://localhost:27017',\n      'uriOptions' =\n [],\n      'driverOptions' =\n [],\n    ],\n  ],\n  'databases' =\n [\n    // Collection alias =\n [ client_alias, collection_name ]\n    'default' =\n ['default', 'drupal'],\n    'logger' =\n ['default', 'logger'],\n    'foodb' =\n ['default', 'foo-database'],\n  ],\n];\n\n\n\nWith such a configuration, the \nfoodb\n alias is available to all MongoDB-using\nmodules in the site, possibly pointing to different databases depending on the\nenvironment (development, staging, production...).\n\n\nService-based module adapter\n\n\nThe \nfoo.services.yml\n service file for the bespoke \nfoo.module\n can then\nreference \nfoodb\n to access the database with a constant alias, regardless\nof the environment:\n\n\n// modules/custom/Foo/foo.services.yml\nservices:\n  foo.storage:\n    class: 'MongoDB\\Database'\n    factory: ['@mongodb.database_factory', 'get']\n    arguments: ['foodb']\n\n  foo.bar:\n    class: 'Drupal\\foo\\Bar'\n    arguments: ['@foo.storage', '$logger.channel.foo']\n\n\n\nThis allows services in the module to access the database in both function code\nfor Drupal hooks, and OO code for component-level logic without having to be\nenvironment-aware.\n\n\nIf the \nmongodb_watchdog\n module is enabled, the logger passed to the\napplication will be a standard PSR-3 logger writing to MongoDB without the\napplication having to know anything about it, but still providing a standard\nDrupal UI to examine the application logs.\n\n\nComponent logic\n\n\nFinally the component application logic can use the services without receiving\nany Drupal-specific dependency. In this example, we can simply assume the\nservice code is located within the module itself, for simplicity:\n\n\n?php\n// modules/custom/Foo/src/Bar.php\nuse MongoDb\\Database;\nuse Psr\\Log\\LoggerInterface;\n\npublic function __construct(Database $database, LoggerInterface $logger) {\n  $this-\ndatabase = $database;\n  $this-\nlogger = $logger;\n}\n\npublic function baz() {\n  // Perform some business logic using $this-\ndatabase.\n  // Log it using $this-\nlogger.\n}\n\n\n\nHaving the code only receive standard services (like a PSR-3 logger) or\n\nPHP library\n classes allows it to be written as an agnostic component that can\nbe brought in using Composer and shared with non-Drupal code. This is often\nuseful in bespoke projects, which tend to combine Drupal with other parts of the\napplication written in Laravel or Symfony standard edition, since the code has\nno Drupal-specific dependency.\n\n\nTests\n\n\nThe \nmongodb\n module provides a \nMongoDbTestBase\n base test class allowing\nkernel-based integration tests, as described on the \ntests\n page.", 
            "title": "Bespoke code"
        }, 
        {
            "location": "/bespoke/#bespoke-code", 
            "text": "Beyond the simple use cases covered by this standard package, most uses of\nMongoDB in Drupal projects appear in enteprise-class bespoke developments. Until\nthis version, this usually meant totally custom code, built either straight from\nthe legacy  mongo  extension, or on top of the Doctrine ODM for MongoDB,\nsuffering from a total lack of integration with the underlying core Drupal CMS.  Starting with 8.x-2.0, such one-off code can be developed on top of the base mongodb  module: unlike earlier releases, 8.x-2.x uses the PHP-standard\nconnection methods and options, without deviation, adding only a thin layer of\nDrupal adaptation on top of the standard  mongodb   extension  and PHP library .", 
            "title": "Bespoke code"
        }, 
        {
            "location": "/bespoke/#example", 
            "text": "The familiar Drupal alias mechanism for databases is available to provide easy,\nstring-referenced access to  Client  and  Database  instances through the\npackage-provided  ClientFactory  and  DatabaseFactory  services respectively.  Most such code is likely to be service based, so here is an example of a service bar  in module  foo , using a custom  foo-database  aliased as  foodb , to keep\nits storage separate from the main database used by the package modules, and its\nlogic independent of other Drupal modules.", 
            "title": "Example"
        }, 
        {
            "location": "/bespoke/#per-environment-settings", 
            "text": "The site local settings file includes the alias definition, binding it to the\nactual database credentials, allowing for per-environment configuration:  ?php\n// settings.local.php\n$settings['mongodb'] = [\n  'clients' =  [\n    // Client alias =  constructor parameters.\n    'default' =  [\n      'uri' =  'mongodb://localhost:27017',\n      'uriOptions' =  [],\n      'driverOptions' =  [],\n    ],\n  ],\n  'databases' =  [\n    // Collection alias =  [ client_alias, collection_name ]\n    'default' =  ['default', 'drupal'],\n    'logger' =  ['default', 'logger'],\n    'foodb' =  ['default', 'foo-database'],\n  ],\n];  With such a configuration, the  foodb  alias is available to all MongoDB-using\nmodules in the site, possibly pointing to different databases depending on the\nenvironment (development, staging, production...).", 
            "title": "Per-environment settings"
        }, 
        {
            "location": "/bespoke/#service-based-module-adapter", 
            "text": "The  foo.services.yml  service file for the bespoke  foo.module  can then\nreference  foodb  to access the database with a constant alias, regardless\nof the environment:  // modules/custom/Foo/foo.services.yml\nservices:\n  foo.storage:\n    class: 'MongoDB\\Database'\n    factory: ['@mongodb.database_factory', 'get']\n    arguments: ['foodb']\n\n  foo.bar:\n    class: 'Drupal\\foo\\Bar'\n    arguments: ['@foo.storage', '$logger.channel.foo']  This allows services in the module to access the database in both function code\nfor Drupal hooks, and OO code for component-level logic without having to be\nenvironment-aware.  If the  mongodb_watchdog  module is enabled, the logger passed to the\napplication will be a standard PSR-3 logger writing to MongoDB without the\napplication having to know anything about it, but still providing a standard\nDrupal UI to examine the application logs.", 
            "title": "Service-based module adapter"
        }, 
        {
            "location": "/bespoke/#component-logic", 
            "text": "Finally the component application logic can use the services without receiving\nany Drupal-specific dependency. In this example, we can simply assume the\nservice code is located within the module itself, for simplicity:  ?php\n// modules/custom/Foo/src/Bar.php\nuse MongoDb\\Database;\nuse Psr\\Log\\LoggerInterface;\n\npublic function __construct(Database $database, LoggerInterface $logger) {\n  $this- database = $database;\n  $this- logger = $logger;\n}\n\npublic function baz() {\n  // Perform some business logic using $this- database.\n  // Log it using $this- logger.\n}  Having the code only receive standard services (like a PSR-3 logger) or PHP library  classes allows it to be written as an agnostic component that can\nbe brought in using Composer and shared with non-Drupal code. This is often\nuseful in bespoke projects, which tend to combine Drupal with other parts of the\napplication written in Laravel or Symfony standard edition, since the code has\nno Drupal-specific dependency.", 
            "title": "Component logic"
        }, 
        {
            "location": "/bespoke/#tests", 
            "text": "The  mongodb  module provides a  MongoDbTestBase  base test class allowing\nkernel-based integration tests, as described on the  tests  page.", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/", 
            "text": "The newly ported modules have some test coverage, which can be checked with\nPHPUnit.\n\n\nPHPUnit\n\n\nWriting custom tests\n\n\nThe \nmongodb\n module provides a \nDrupal\\mongodb\\Tests\\MongoDbTestBase\n base\nclass on which to build custom kernel tests for \nbespoke\n modules, as\nit provides a per-test database created during test \nsetUp()\n, and\ndropped during \ntearDown()\n.\n\n\nThe base class is documented on the \nmongodb\n documentation page.\n\n\nComplete test example\n\n\nThis example show how to write a test using a custom \nfoo\n database for the\neponymous module \nfoo\n, assuming individual tests do not drop the database\ninstance themselves.\n\n\n?php\n\nnamespace Drupal\\foo\\Tests;\n\nuse Drupal\\mongodb\\Tests\\MongoDbTestBase;\n\n/**\n * @coversDefaultClass \\Drupal\\foo\\Foo\n * @group foo\n */\nclass FooTest extends MongoDbTestBase {\n  const MODULE = 'foo';\n\n  /**\n   * The test database.\n   */\n  protected $database;\n\n  /**\n   * Add a custom alias to settings and instantiate a custom database.\n   */\n  public function setUp() {\n    parent::setUp();\n    $this-\nsettings['databases'][static::MODULE] = [\n      static::CLIENT_TEST_ALIAS,\n      $this-\ngetTestDatabaseName(static::MODULE),\n    ];\n    $this-\ndatabase = new DatabaseFactory(\n      new ClientFactory($this-\nsettings),\n      $this-\nsettings\n    )-\nget(static::MODULE);\n  }\n\n  /**\n   * Drop the custom database.\n   */\n  public function tearDown() {\n    $this-\ndatabase-\ndrop();\n    parent::tearDown();\n  }\n\n  /**\n   * @covers ::whatever\n   */\n  public function testWhatever() {\n    // ... custom test logic...\n  }\n\n}\n\n\n\nRunning tests\n\n\nWith the Simpletest UI apparently going away in Drupal 8.2 (cf \n#2566767\n,\n\n#2750461\n), tests should be run from the command line.\n\n\nRunning directly\n\n\nThe typical full command to run tests looks like this (\n\\\n is to avoid too long a line):\n\n\nMONGODB_URI=mongodb://somemongohost:27017 \\\nSIMPLETEST_DB=mysql://someuser:somepassword@localhost/somedatabase \\\nphpunit -c core/phpunit.xml.dist\n\n\n\n\n\nOptional: \nMONGODB_URI\n points to a working MongoDB instance. This variable is optional:\n  if it is not provided, the tests will default to \nmongodb://localhost:27017\n.\n\n\nRequired: \nSIMPLETEST_DB\n is the standard Drupal 8 variable needed to run tests that\n  can need the database service.\n\n\n\n\nBoth variables can be set in the \ncore/phpunit.xml\n custom configuration file.\n\n\nUsing a \nphpunit.xml\n configuration file\n\n\nThe test command can also be simplified using a \nphpunit.xml\n configuration file:\n\n\nphpunit -c core/phpunit.xml\n\n\n\nOr to generate a coverage report:\n\n\nphpunit -c core/phpunit.xml --coverage-html=/some/coverage/path modules/contrib/mongodb\n\n\n\n\n\ncore/phpunit.xml\n is a local copy of the default \ncore/phpunit.xml.dist\n\n  configuration file, tweaked to only test the minimum set of files needed by\n  the test suite.\n\n\nIt can look like this, to obtain a coverage report not including the whole\n  Drupal tree, but just the MongoDB package itself:\n?xml version=\"1.0\" encoding=\"UTF-8\"?\n\n\n\nphpunit ...snip...\n\n  \nphp\n\n    \nenv name=\"SIMPLETEST_DB\" value=\"mysql://someuser:somepass@somesqlhost/somedb\"/\n\n    \nenv name=\"MONGODB_URI\" value=\"mongodb://somemongohost:27017\" /\n\n  \n/php\n\n  \ntestsuites ...snip...\n...snip...\n/testsuites\n\n  \nlisteners\n...snip...\n/listener\n\n  \n/listeners\n\n  \nfilter\n\n    \nwhitelist\n\n      \ndirectory\n../modules/contrib/mongodb\n/directory\n\n      \nexclude\n\n        \ndirectory\n../modules/contrib/mongodb/modules/mongodb/src/Tests\n/directory\n\n        \ndirectory suffix=\"Test.php\"\n./\n/directory\n\n        \ndirectory suffix=\"TestBase.php\"\n./\n/directory\n\n      \n/exclude\n\n     \n/whitelist\n\n  \n/filter\n\n\n/phpunit", 
            "title": "Tests"
        }, 
        {
            "location": "/tests/#phpunit", 
            "text": "", 
            "title": "PHPUnit"
        }, 
        {
            "location": "/tests/#writing-custom-tests", 
            "text": "The  mongodb  module provides a  Drupal\\mongodb\\Tests\\MongoDbTestBase  base\nclass on which to build custom kernel tests for  bespoke  modules, as\nit provides a per-test database created during test  setUp() , and\ndropped during  tearDown() .  The base class is documented on the  mongodb  documentation page.", 
            "title": "Writing custom tests"
        }, 
        {
            "location": "/tests/#complete-test-example", 
            "text": "This example show how to write a test using a custom  foo  database for the\neponymous module  foo , assuming individual tests do not drop the database\ninstance themselves.  ?php\n\nnamespace Drupal\\foo\\Tests;\n\nuse Drupal\\mongodb\\Tests\\MongoDbTestBase;\n\n/**\n * @coversDefaultClass \\Drupal\\foo\\Foo\n * @group foo\n */\nclass FooTest extends MongoDbTestBase {\n  const MODULE = 'foo';\n\n  /**\n   * The test database.\n   */\n  protected $database;\n\n  /**\n   * Add a custom alias to settings and instantiate a custom database.\n   */\n  public function setUp() {\n    parent::setUp();\n    $this- settings['databases'][static::MODULE] = [\n      static::CLIENT_TEST_ALIAS,\n      $this- getTestDatabaseName(static::MODULE),\n    ];\n    $this- database = new DatabaseFactory(\n      new ClientFactory($this- settings),\n      $this- settings\n    )- get(static::MODULE);\n  }\n\n  /**\n   * Drop the custom database.\n   */\n  public function tearDown() {\n    $this- database- drop();\n    parent::tearDown();\n  }\n\n  /**\n   * @covers ::whatever\n   */\n  public function testWhatever() {\n    // ... custom test logic...\n  }\n\n}", 
            "title": "Complete test example"
        }, 
        {
            "location": "/tests/#running-tests", 
            "text": "With the Simpletest UI apparently going away in Drupal 8.2 (cf  #2566767 , #2750461 ), tests should be run from the command line.", 
            "title": "Running tests"
        }, 
        {
            "location": "/tests/#running-directly", 
            "text": "The typical full command to run tests looks like this ( \\  is to avoid too long a line):  MONGODB_URI=mongodb://somemongohost:27017 \\\nSIMPLETEST_DB=mysql://someuser:somepassword@localhost/somedatabase \\\nphpunit -c core/phpunit.xml.dist   Optional:  MONGODB_URI  points to a working MongoDB instance. This variable is optional:\n  if it is not provided, the tests will default to  mongodb://localhost:27017 .  Required:  SIMPLETEST_DB  is the standard Drupal 8 variable needed to run tests that\n  can need the database service.   Both variables can be set in the  core/phpunit.xml  custom configuration file.", 
            "title": "Running directly"
        }, 
        {
            "location": "/tests/#using-a-phpunitxml-configuration-file", 
            "text": "The test command can also be simplified using a  phpunit.xml  configuration file:  phpunit -c core/phpunit.xml  Or to generate a coverage report:  phpunit -c core/phpunit.xml --coverage-html=/some/coverage/path modules/contrib/mongodb   core/phpunit.xml  is a local copy of the default  core/phpunit.xml.dist \n  configuration file, tweaked to only test the minimum set of files needed by\n  the test suite.  It can look like this, to obtain a coverage report not including the whole\n  Drupal tree, but just the MongoDB package itself: ?xml version=\"1.0\" encoding=\"UTF-8\"?  phpunit ...snip... \n   php \n     env name=\"SIMPLETEST_DB\" value=\"mysql://someuser:somepass@somesqlhost/somedb\"/ \n     env name=\"MONGODB_URI\" value=\"mongodb://somemongohost:27017\" / \n   /php \n   testsuites ...snip... ...snip... /testsuites \n   listeners ...snip... /listener \n   /listeners \n   filter \n     whitelist \n       directory ../modules/contrib/mongodb /directory \n       exclude \n         directory ../modules/contrib/mongodb/modules/mongodb/src/Tests /directory \n         directory suffix=\"Test.php\" ./ /directory \n         directory suffix=\"TestBase.php\" ./ /directory \n       /exclude \n      /whitelist \n   /filter  /phpunit", 
            "title": "Using a phpunit.xml configuration file"
        }
    ]
}